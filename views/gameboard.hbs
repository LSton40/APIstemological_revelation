<!DOCTYPE html>
<html lang="en">



<div id="gameDiv"></div>

<button id="card-btn">7</button>

<body>


    <script src="https://pixijs.download/release/pixi.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/pixi-filters@latest/dist/pixi-filters.js"></script>
    <script>
        //const filters = new PIXI.filters;
        let app;
        const NORMAL = 0xFFFFFF;
        const OVER = 0x00FF00;
        const DOWN = 0xFF0000;
        const red = 0xff0000;
        const blue = 0x0000FF;
        const green = 0x008000;
        const black = 0x000000;
        const RECT_W = 100;
        const RECT_H = 100;
        let offsetX = 650;
        let offsetY = 50;
        let spacing = 0;
        let pegHoles = [];
        let pointerIsDown = false;
        let pointerIsOver = false;
        let color = NORMAL;
        let startingX = 0;
        let startingY = 0;
        let radius = 15;
        let posTracker = 0;
        const cardBtn = document.querySelector('#card-btn');
        let gameContainer;
        const cardValue = 7;
        const playerLocation = 2 + 1;
        let playerOneLocations = [4, 25, 37, 52, 64];
        let playerTwoLocations = [7];
        let playerThreeLocations = [41, 17, 3];
        let playerFourLocations = [6, 31];
        let outlineFilter;
        //when the start button is presses put all clientside information in local storage
        localStorage.setItem('playerOneLocations', JSON.stringify({ playerOneLocations }));
        window.onload = function () {
            app = new PIXI.Application({
                width: window.innerWidth,
                height: window.innerHeight / 1.5,
                backgroundColor: 0xAAAAAA

            });
            console.log('test');
            const outlineFilter = new PIXI.filters.OutlineFilter();
            console.log(outlineFilter);
            //console.log(PIXI.filters);
            //  const outlineFilterBlue = new PIXI.filters.OutlineFilter(2, 0x99ff99);
            //const outlineFilterRed = new PIXI.filters.GlowFilter(15, 2, 1, 0xff9999, 0.5);
            document.querySelector('#gameDiv').appendChild(app.view);
            gameContainer = new PIXI.Container();
            app.stage.addChild(gameContainer);


            //beginning of game drawing
            // Top column // peg hole 0 - 18
            for (let i = 0; i < 19; i++) {

                const x = startingX + 2 * radius * i;
                const y = startingY;

                pegHoles.push(new PegHole((x + offsetX), y + offsetY, radius, color, posTracker++));
            };

            // Right column // peg holes 19 - 35
            for (let i = 0; i < 17; i++) {

                const x = startingX + 36 * radius;
                const y = startingY + 2 * radius + 2 * radius * i;

                pegHoles.push(new PegHole(x + offsetX + (spacing * 11), y + offsetY + spacing, radius, color, posTracker++));
            };
            // Bottom row // peg holes 36 - 54
            for (let i = 0; i < 19; i++) {

                const x = startingX + 36 * radius - 2 * radius * i;
                const y = startingY + 2 * radius + 34 * radius;

                pegHoles.push(new PegHole(x + offsetX, y + offsetY, radius, color, posTracker++));
            };
            // Left column // peg holes 55 - 71
            for (let i = 0; i < 17; i++) {

                const x = startingX;
                const y = startingY + 34 * radius - 2 * radius * i;

                pegHoles.push(new PegHole(x + offsetX, y + offsetY, radius, color, posTracker++));
            };
            // Top finish line // peg holes 72 - 76
            for (let i = 0; i < 3; i++) {

                const x = startingX + 6 * radius;
                const y = startingY + 2 * radius + 2 * radius * i;

                pegHoles.push(new PegHole(x + offsetX, y + offsetY, radius, color, posTracker++));
            };
            for (let i = 0; i < 2; i++) {

                const x = startingX + 8 * radius + 2 * radius * i;
                const y = startingY + 6 * radius;

                pegHoles.push(new PegHole(x + offsetX, y + offsetY, radius, color, posTracker++));
            };
            // Bottom finish line // peg holes 77 - 81
            for (let i = 0; i < 3; i++) {

                const x = startingX + 30 * radius;
                const y = startingY + 30 * radius + 2 * radius * i;

                pegHoles.push(new PegHole(x + offsetX, y + offsetY, radius, color, posTracker++));
            }
            for (let i = 0; i < 2; i++) {

                const x = startingX + 26 * radius + 2 * radius * i;
                const y = startingY + 30 * radius;

                pegHoles.push(new PegHole(x + offsetX, y + offsetY, radius, color, posTracker++));
            };
            // Right finish line // peg holes 82 - 86
            for (let i = 0; i < 3; i++) {

                const x = startingX + 30 * radius + 2 * radius * i;
                const y = startingY + 6 * radius;

                pegHoles.push(new PegHole(x + offsetX, y + offsetY, radius, color, posTracker++));
            };
            for (let i = 0; i < 2; i++) {

                const x = startingX + 30 * radius;
                const y = startingY + 8 * radius + 2 * radius * i;

                pegHoles.push(new PegHole(x + offsetX, y + offsetY, radius, color, posTracker++));
            };
            // Left finish line // peg holes 87 - 91
            for (let i = 0; i < 3; i++) {

                const x = startingX + 2 * radius + 2 * radius * i;
                const y = startingY + 30 * radius;

                pegHoles.push(new PegHole(x + offsetX, y + offsetY, radius, color, posTracker++));
            };
            for (let i = 0; i < 2; i++) {

                const x = startingX + 6 * radius;
                const y = startingY + 26 * radius + 2 * radius * i;

                pegHoles.push(new PegHole(x + offsetX, y + offsetY, radius, color, posTracker++));
            };

            playerPieces();

            //end of game drawing
            //needs a parent square to hold pegs

            for (let i = 0; i < pegHoles.length; i++) {
                gameContainer.addChild(pegHoles[i]);
            }
            console.log(pegHoles);

            app.ticker.add(gameLoop);


        }

        function gameLoop(delta) { }


        function filterOn() {
            this.filters = [outlineFilterRed];
        }

        function filterOff() {
            this.filters = [outlineFilterBlue];
        }

        function PegHole(x, y, radius, color, name) {
            let circle = new PIXI.Graphics();
            circle.beginFill(NORMAL);
            circle.drawCircle(x, y, radius, radius);
            circle.endFill();
            let type = 'peghole';
            //console.log(circle.filters);
            circle.interactive = true;
            circle.buttonMode = true;
            //console.log(outlineFilter);
            //moves.filterOn();
            //circle.on('pointerdown', filterOn);
            //circle.filters = [new OutlineFilter(2, 0x99ff99)];


            // circle.on("pointerup", doPointerUp);
            circle.on("pointerdown", doPointerDown);
            //circle.on("pointerover", doPointerOver);
            //circle.on("pointerout", doPointerOut);
            //circle.on("pointerupoutside", doPointerUpOutside);

            let canMove = false;

            circle.name = name;
            //circle.speed = speed;

            return circle;
        }









        //  function doPointerUp() {
        //     console.log("pointer up");
        //}
        function doPointerDown() {
            console.log(`type: ${this.type}`);
            console.log(`type: ${this.canMove}`);
            console.log(`this output ${this}`);
            console.log(`name ${this.name}`);
            if (this.canMove === true) {
                this.tint = red;
                console.log(playerOneLocations);
                //get location of original peg
                let pegLoc = this.name - cardValue;

                if (pegLoc < 0) {
                    pegLoc = pegLoc + 72;
                }
                let originalLoc = playerOneLocations.find(peg => {
                    return peg == pegHoles[pegLoc].name;
                });
                //change the hand numbers 
                playerOneLocations[playerOneLocations.indexOf(originalLoc)] = this.name;
                pegHoles[pegLoc].tint = NORMAL;
                console.log(playerOneLocations);

                console.log(localStorage.getItem('playerOneLocations'));
                this.filters = [outlineFilter];

            }
            console.log("pointer down");
            pointerIsDown = true;
        }






        //This generates the player pieces using piece location
        function playerPieces() {

            for (i = 0; i < playerOneLocations.length; i++) {
                pegHoles[playerOneLocations[i]].tint = red;
            }

            for (i = 0; i < playerTwoLocations.length; i++) {
                pegHoles[playerTwoLocations[i]].tint = blue;
            }

            for (i = 0; i < playerThreeLocations.length; i++) {
                pegHoles[playerThreeLocations[i]].tint = green;
            }

            for (i = 0; i < playerFourLocations.length; i++) {
                pegHoles[playerFourLocations[i]].tint = black;
            }

        }


        // When player clicks on card it shows the possible moves they can do
        function showPossibleMoves() {
            

            for (i = 0; i < playerOneLocations.length; i++) {
                let moveLocations = playerOneLocations[i] + cardValue;
                let moves;

                if(moveLocations > 71) {
                    moveLocations = moveLocations - 72;
                    
                }
                 
                moves = pegHoles[moveLocations];
                moves.canMove = true;
                moves.tint = '0xffff00';
            }



            //console.log(moves);
            console.log(playerOneLocations);
        }




        cardBtn.addEventListener('click', showPossibleMoves);



    </script>


</body>

</html>