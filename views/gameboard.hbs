<!DOCTYPE html>
<html lang="en">



<div id="gameDiv"></div>

<button id="card-btn">7</button>

<body>
    

    <script src="https://pixijs.download/release/pixi.js"></script>

    <script>

        let app;
        const NORMAL = 0xFFFFFF;
        const OVER = 0x00FF00;
        const DOWN = 0xFF0000;
        const red = 0xff0000;
        const blue = 0x0000FF;
        const green = 0x008000;
        const black = 0x000000;
        const RECT_W = 100;
        const RECT_H = 100;
        let offsetX = 650;
        let offsetY = 100;
        let spacing = 0;
        let pegHoles = [];
        let pointerIsDown = false;
        let pointerIsOver = false;
        let color = NORMAL;
        let startingX = 0;
        let startingY = 0;
        let radius = 15;
        let posTracker = 0;
        const cardBtn = document.querySelector('#card-btn');
        let gameContainer;

        window.onload = function () {
            app = new PIXI.Application({
                width: window.innerWidth,
                height: window.innerHeight / 1.5,
                backgroundColor: 0xAAAAAA

            });
            document.querySelector('#gameDiv').appendChild(app.view);
            gameContainer = new PIXI.Container();
            app.stage.addChild(gameContainer);


            //beginning of game drawing
            // Top column // peg hole 0 - 18
            for (let i = 0; i < 19; i++) {

                const x = startingX + 2 * radius * i;
                const y = startingY;

                pegHoles.push(new PegHole((x + offsetX), y + offsetY, radius, color, "hole " + posTracker++));
            };

            // Right column // peg holes 19 - 35
            for (let i = 0; i < 17; i++) {

                const x = startingX + 36 * radius;
                const y = startingY + 2 * radius + 2 * radius * i;

                pegHoles.push(new PegHole(x + offsetX + (spacing * 11), y + offsetY + spacing, radius, color, "hole " + posTracker++));
            };
            // Bottom row // peg holes 36 - 54
            for (let i = 0; i < 19; i++) {

                const x = startingX + 36 * radius - 2 * radius * i;
                const y = startingY + 2 * radius + 34 * radius;

                pegHoles.push(new PegHole(x + offsetX, y + offsetY, radius, color, "hole " + posTracker++));
            };
            // Left column // peg holes 55 - 71
            for (let i = 0; i < 17; i++) {

                const x = startingX;
                const y = startingY + 34 * radius - 2 * radius * i;

                pegHoles.push(new PegHole(x + offsetX, y + offsetY, radius, color, "hole " + posTracker++));
            };
            // Top finish line // peg holes 72 - 76
            for (let i = 0; i < 3; i++) {

                const x = startingX + 6 * radius;
                const y = startingY + 2 * radius + 2 * radius * i;

                pegHoles.push(new PegHole(x + offsetX, y + offsetY, radius, color, "hole " + posTracker++));
            };
            for (let i = 0; i < 2; i++) {

                const x = startingX + 8 * radius + 2 * radius * i;
                const y = startingY + 6 * radius;

                pegHoles.push(new PegHole(x + offsetX, y + offsetY, radius, color, "hole " + posTracker++));
            };
            // Bottom finish line // peg holes 77 - 81
            for (let i = 0; i < 3; i++) {

                const x = startingX + 30 * radius;
                const y = startingY + 30 * radius + 2 * radius * i;

                pegHoles.push(new PegHole(x + offsetX, y + offsetY, radius, color, "hole " + posTracker++));
            }
            for (let i = 0; i < 2; i++) {

                const x = startingX + 26 * radius + 2 * radius * i;
                const y = startingY + 30 * radius;

                pegHoles.push(new PegHole(x + offsetX, y + offsetY, radius, color, "hole " + posTracker++));
            };
            // Right finish line // peg holes 82 - 86
            for (let i = 0; i < 3; i++) {

                const x = startingX + 30 * radius + 2 * radius * i;
                const y = startingY + 6 * radius;

                pegHoles.push(new PegHole(x + offsetX, y + offsetY, radius, color, "hole " + posTracker++));
            };
            for (let i = 0; i < 2; i++) {

                const x = startingX + 30 * radius;
                const y = startingY + 8 * radius + 2 * radius * i;

                pegHoles.push(new PegHole(x + offsetX, y + offsetY, radius, color, "hole " + posTracker++));
            };
            // Left finish line // peg holes 87 - 91
            for (let i = 0; i < 3; i++) {

                const x = startingX + 2 * radius + 2 * radius * i;
                const y = startingY + 30 * radius;

                pegHoles.push(new PegHole(x + offsetX, y + offsetY, radius, color, "hole " + posTracker++));
            };
            for (let i = 0; i < 2; i++) {

                const x = startingX + 6 * radius;
                const y = startingY + 26 * radius + 2 * radius * i;

                pegHoles.push(new PegHole(x + offsetX, y + offsetY, radius, color, "hole " + posTracker++));
            };

            playerPieces();

            //end of game drawing
            //needs a parent square to hold pegs

            for (let i = 0; i < pegHoles.length; i++) {
                gameContainer.addChild(pegHoles[i]);
            }
            console.log(pegHoles);

            app.ticker.add(gameLoop);

            test();

        }

        function gameLoop(delta) { }


        function PegHole(x, y, radius, color, name) {
            let circle = new PIXI.Graphics();
            circle.beginFill(NORMAL);
            circle.drawCircle(x, y, radius, radius);
            circle.endFill();
            

            circle.interactive = true;
            circle.buttonMode = true;

            //circle.on("pointerup", doPointerUp);
            //circle.on("pointerdown", doPointerDown);
            //circle.on("pointerover", doPointerOver);
            //circle.on("pointerout", doPointerOut);
            //circle.on("pointerupoutside", doPointerUpOutside);



            circle.name = name;
            //circle.speed = speed;

            return circle;
        }


        
        
        

        


        function doPointerUp() {
            console.log("pointer up");
            // this.beginFill(NORMAL);
            // // this.drawRect((app.view.width / 2) - 100, (app.view.height / 2) - 100, 200, 200);
            // this.endFill();
            if (pointerIsOver) {
                this.tint = NORMAL;
                // this.y = this.y - this.speed;
                console.log(`${this.name} is up at ${this.y}`);
            }
            else {
                this.tint = NORMAL
            }
            pointerIsDown = false;
        }
        function doPointerDown() {
  
           

            //if(this.name === 'card'){
                 
              //  pegHoles[34].tint();




           // }
            //else if(this.name == 'peg'){

                //do the emit 
                 
            //}
            





            console.log("pointer down");
            // this.beginFill(DOWN);
            // // this.drawRect((app.view.width / 2) - 100, (app.view.height / 2) - 100, 200, 200);
            // this.endFill();
            this.tint = DOWN;
            pointerIsDown = true;
            let name = this.name;
            console.log('name is being passed');
            let test = socket.emit('tile-press', name);
            console.log(`test: ${test}`);
            //console.log(`name = > ${name}`)
            console.log('name has passed');

        }
        function doPointerOver() {
            console.log("pointer over");
            // this.beginFill(OVER);
            // // this.drawRect((app.view.width / 2) - 100, (app.view.height / 2) - 100, 200, 200);
            // this.endFill();
            this.tint = OVER;
            pointerIsOver = true;
        }
        function doPointerOut() {
            console.log("pointer out");
            // this.beginFill(NORMAL);
            // this.drawRect((app.view.width / 2) - 100, (app.view.height / 2) - 100, 200, 200);
            // this.endFill();
            this.tint = NORMAL;
        }
        function doPointerUpOutside() {
            console.log("pointer up outside");
            // this.beginFill(NORMAL);
            // this.drawRect((app.view.width / 2) - 100, (app.view.height / 2) - 100, 200, 200);
            // this.endFill();
            this.tint = NORMAL;
            pointerIsOver = false;
            pointerIsDown = false;
        }

        const cardValue = 7;
        const playerLocation = 2 + 1;

        let playerOneLocations = [4, 25, 37, 52, 64];
        let playerTwoLocations = [7];
        let playerThreeLocations = [41, 17, 3];
        let playerFourLocations = [6, 31];


        //This generates the player pieces using piece location
        function playerPieces () {

            for (i = 0; i < playerOneLocations.length; i++) {
                pegHoles[playerOneLocations[i]].tint = red;
            }

            for (i = 0; i < playerTwoLocations.length; i++) {
                pegHoles[playerTwoLocations[i]].tint = blue;
            }

            for (i = 0; i < playerThreeLocations.length; i++) {
                pegHoles[playerThreeLocations[i]].tint = green;
            }

            for (i = 0; i < playerFourLocations.length; i++) {
                pegHoles[playerFourLocations[i]].tint = black;
            }

        }
        
        // When player clicks on card it shows the possible moves they can do
        function showPossibleMoves () {

            for(i = 0; i < playerOneLocations.length; i ++) {
                let moves = pegHoles[playerOneLocations[i] + cardValue];
                moves.tint = '0xffff00';
            }
            
            moves.addEventListener('click', movePiece);
        }
        
        // We need to figure out how to move the piece to the clicked location
        function movePiece () {
            
            console.log('click');
        }

        

        cardBtn.addEventListener('click', showPossibleMoves)
 
    </script>




</body>

</html>