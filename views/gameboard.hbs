<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Pixi tutorial</title>
    <link rel="stylesheet" href="./index.css">
    <script src="https://pixijs.download/release/pixi.js"></script>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        var socket = io();
        let app;
        const NORMAL = 0xFFFFFF;
        const OVER = 0x00FF00;
        const DOWN = 0xFF0000;
        const RECT_W = 100;
        const RECT_H = 100;
        let offsetX = 750;
        let offsetY = 150;
        let spacing = 0;
        let pegHoles = [];
        let pointerIsDown = false;
        let pointerIsOver = false;
        let color = NORMAL;
        let radius = 5;
        let posTracker = 0;
        const PEG_HOLE_SPACING = 10;

        window.onload = function () {
            app = new PIXI.Application({
                width: window.innerWidth,
                height: window.innerHeight / 1.5,
                backgroundColor: 0xAAAAAA

            });
            document.querySelector('#gameDiv').appendChild(app.view);



            //beginning of game drawing
            for (let i = 0; i < 19; i++) {
                const x = 70 + PEG_HOLE_SPACING * i;
                const y = 20;

                pegHoles.push(new PegHole((x + offsetX), y + offsetY, radius, color, "hole " + posTracker++));
            };

            // Right column // peg holes 19 - 36
            for (let i = 0; i < 17; i++) {
                const x = 250;
                const y = 30 + PEG_HOLE_SPACING * i;

                pegHoles.push(new PegHole(x + offsetX + (spacing * 11), y + offsetY + spacing, radius, color, "hole " + posTracker++));
            };
            // Bottom row // peg holes 37 - 53
            for (let i = 0; i < 19; i++) {
                const x = 250 - PEG_HOLE_SPACING * i;
                const y = 200;
                pegHoles.push(new PegHole(x + offsetX, y + offsetY, radius, color, "hole " + posTracker++));
            };
            // Left column // peg holes 54 -71
            for (let i = 0; i < 17; i++) {
                const x = 70;
                const y = 190 - PEG_HOLE_SPACING * i;

                pegHoles.push(new PegHole(x + offsetX, y + offsetY, radius, color, "hole " + posTracker++));
            };
            // Top finish line // peg holes 72 - 76
            for (let i = 0; i < 3; i++) {
                const x = 100;
                const y = 30 + PEG_HOLE_SPACING * i;

                pegHoles.push(new PegHole(x + offsetX, y + offsetY, radius, color, "hole " + posTracker++));
            };
            for (let i = 0; i < 2; i++) {
                const x = 110 + PEG_HOLE_SPACING * i;
                const y = 50;

                pegHoles.push(new PegHole(x + offsetX, y + offsetY, radius, color, "hole " + posTracker++));
            };
            // Bottom finish line // peg holes 77 - 81
            for (let i = 0; i < 3; i++) {
                const x = 220;
                const y = 170 + PEG_HOLE_SPACING * i;

                pegHoles.push(new PegHole(x + offsetX, y + offsetY, radius, color, "hole " + posTracker++));
            }
            for (let i = 0; i < 2; i++) {
                const x = 200 + PEG_HOLE_SPACING * i;
                const y = 170;

                pegHoles.push(new PegHole(x + offsetX, y + offsetY, radius, color, "hole " + posTracker++));
            };
            // Right finish line // peg holes 82 - 86
            for (let i = 0; i < 3; i++) {
                const x = 220 + PEG_HOLE_SPACING * i;
                const y = 50;

                pegHoles.push(new PegHole(x + offsetX, y + offsetY, radius, color, "hole " + posTracker++));
            };
            for (let i = 0; i < 2; i++) {
                const x = 220;
                const y = 60 + PEG_HOLE_SPACING * i;

                pegHoles.push(new PegHole(x + offsetX, y + offsetY, radius, color, "hole " + posTracker++));
            };
            // Left finish line // peg holes 87 - 91
            for (let i = 0; i < 3; i++) {
                const x = 80 + PEG_HOLE_SPACING * i;
                const y = 170;

                pegHoles.push(new PegHole(x + offsetX, y + offsetY, radius, color, "hole " + posTracker++));
            };
            for (let i = 0; i < 2; i++) {
                const x = 100;
                const y = 150 + PEG_HOLE_SPACING * i;

                pegHoles.push(new PegHole(x + offsetX, y + offsetY, radius, color, "hole " + posTracker++));
            };
            // Top spawn // peg holes 92 - 96
            for (let i = 0; i < 5; i++) {
                const x = 150;
                const y = 30 + PEG_HOLE_SPACING * i;

                pegHoles.push(new PegHole(x + offsetX, y + offsetY, radius, color, "hole " + posTracker++));
            };
            // Bottom spawn // peg holes 97 - 101
            for (let i = 0; i < 5; i++) {
                const x = 170;
                const y = 150 + PEG_HOLE_SPACING * i;

                pegHoles.push(new PegHole(x + offsetX, y + offsetY, radius, color, "hole " + posTracker++));
            };
            // Right spawn // peg holes 102 - 106
            for (let i = 0; i < 5; i++) {
                const x = 200 + PEG_HOLE_SPACING * i;
                const y = 100;

                pegHoles.push(new PegHole(x + offsetX, y + offsetY, radius, color, "hole " + posTracker++));
            };
            // Left spawn // peg holes 107 - 112
            for (let i = 0; i < 5; i++) {
                const x = 80 + PEG_HOLE_SPACING * i;
                const y = 120;

                pegHoles.push(new PegHole(x + offsetX, y + offsetY, radius, color, "hole " + posTracker++));
            };
            //end of game drawing

            for (let i = 0; i < pegHoles.length; i++) {
                app.stage.addChild(pegHoles[i]);
            }
            console.log(pegHoles);

            app.ticker.add(gameLoop);

        }

        function gameLoop(delta) { }


        function PegHole(x, y, radius, color, name, speed) {
            let circle = new PIXI.Graphics();
            circle.beginFill(NORMAL);
            circle.drawCircle(x, y, radius, radius);
            circle.endFill();
            circle.interactive = true;
            circle.buttonMode = true;

            circle.on("pointerup", doPointerUp);
            circle.on("pointerdown", doPointerDown);
            circle.on("pointerover", doPointerOver);
            circle.on("pointerout", doPointerOut);
            circle.on("pointerupoutside", doPointerUpOutside);


            circle.name = name;
            circle.speed = speed;

            return circle;
        }






        function doPointerUp() {
            console.log("pointer up");
            // this.beginFill(NORMAL);
            // // this.drawRect((app.view.width / 2) - 100, (app.view.height / 2) - 100, 200, 200);
            // this.endFill();
            if (pointerIsOver) {
                this.tint = NORMAL;
                // this.y = this.y - this.speed;
                console.log(`${this.name} is up at ${this.y}`);
            }
            else {
                this.tint = NORMAL
            }
            pointerIsDown = false;
        }
        function doPointerDown() {
            console.log("pointer down");
            // this.beginFill(DOWN);
            // // this.drawRect((app.view.width / 2) - 100, (app.view.height / 2) - 100, 200, 200);
            // this.endFill();
            this.tint = DOWN;
            pointerIsDown = true;
            let name = this.name;
            console.log('name is being passed');
            let test = socket.emit('tile-press', name);
            console.log(`test: ${test}`);
            //console.log(`name = > ${name}`)
            console.log('name has passed');

        }
        function doPointerOver() {
            console.log("pointer over");
            // this.beginFill(OVER);
            // // this.drawRect((app.view.width / 2) - 100, (app.view.height / 2) - 100, 200, 200);
            // this.endFill();
            this.tint = OVER;
            pointerIsOver = true;
        }
        function doPointerOut() {
            console.log("pointer out");
            // this.beginFill(NORMAL);
            // this.drawRect((app.view.width / 2) - 100, (app.view.height / 2) - 100, 200, 200);
            // this.endFill();
            this.tint = NORMAL;
        }
        function doPointerUpOutside() {
            console.log("pointer up outside");
            // this.beginFill(NORMAL);
            // this.drawRect((app.view.width / 2) - 100, (app.view.height / 2) - 100, 200, 200);
            // this.endFill();
            this.tint = NORMAL;
            pointerIsOver = false;
            pointerIsDown = false;
        }




        





    </script>
</head>

<body>
    <div id="gameDiv"></div>


</body>

</html>